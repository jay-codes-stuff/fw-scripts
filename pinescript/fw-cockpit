//@version=5
indicator("FW cockpit by Mars (light)", overlay=true, dynamic_requests=true)
// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © marsrides
// v 2.0

// Check if the timeframe is not weekly
if not timeframe.isweekly
    if barstate.islast
        label.new(bar_index, high, "Switch to Weekly timeframe!", color=color.red, textcolor=color.white, style=label.style_label_down, size=size.normal)   

// Function to draw R:R zones
drawRRZones(left, right, startPrice, riskAmount, nZones, showRRlines) =>
    colorStep = 30
    for i = 1 to nZones
        rLevel = startPrice + riskAmount * i
        boxTop = rLevel
        boxBottom = startPrice + riskAmount * (i - 1)
        boxColor = color.new(color.green, 140 - i * colorStep)
        box.new(left, boxTop, right, boxBottom, bgcolor=boxColor, border_color=na)
        label.new(left, boxTop, str.tostring(i) + "R", 
                  color=color.new(color.black, 0), textcolor=color.white, size=size.small, 
                  style=label.style_label_left, xloc=xloc.bar_index, yloc=yloc.price)
        
        // Draw horizontal line for each R level across the entire chart
        if showRRlines
            line.new(left, rLevel, bar_index, rLevel, color=color.lime, style=line.style_dotted, extend=extend.right)

// Global Variables
var line currentSLLine = na
var int lastSLUpdateBar = na

// Inputs for user clicks
consolidationStart = input.time(defval = timestamp("1 Jan 2000"), title="Consolidation Start (Click)", confirm=true, group="Main parameters", display=display.none)
breakoutWeek = input.time(defval = timestamp("1 Jan 2000"), title="Breakout Week (Click)", confirm=true, group="Main parameters", display=display.none)

// Calculate consolidation periods and trade date
consolPeriods = math.round((breakoutWeek - consolidationStart) / (7 * 24 * 60 * 60 * 1000)) - 1
tradeDate = breakoutWeek + 7 * 24 * 60 * 60 * 1000  // One week after breakout

// Find the breakout candle's close price
var float breakoutClose = na

// Capture the breakout close price when we reach the breakout week
if time == breakoutWeek
    breakoutClose := close

// Allow user to adjust purchase price
purchasePrice = input.float(defval = 0.0, title = "Price filled (0 for auto)", step = 0.01, group="Main parameters", display=display.none)

// Use the captured breakout close price or user input
effectivePurchasePrice = purchasePrice == 0.0 ? (na(breakoutClose) ? na : breakoutClose + 0.01) : purchasePrice

showPnLColor = input.bool(defval = true, title="Show P/L background", group="Main parameters", display=display.none)

manualSL = input.float(defval = 0.0, title = "Stop Loss (0 for auto)", step = 0.01, group="Main parameters", display=display.none)
raisedSLdiff = input.float(defval = 0.02, title = "Raised Stop Loss= Low -x", step = 0.01, group="Main parameters", display=display.none)

// New input for consolidation method
consolMethod = input.string("Smart", "Consolidation Method", confirm=true, options=["Wicks", "Bodies", "Smart"], group="Main parameters", tooltip="How the consolidation channel is drawn", display=display.none)

// RR Zones options
showRRs = input.bool(defval = false, title="Show RR Zones", group="RR Zones", display=display.none)
showRRLines = input.bool(defval = false, title="Show RR Lines", group="RR Zones", display=display.none) 
nZones = input.int(defval = 6, title = "Number of R zones", group="RR Zones", display=display.none)

// Colors and styles
boxColor = input.color(color.white, "Box Color", group="Cosmetics", display=display.none)
lineColor = input.color(color.white, "Line Color", group="Cosmetics", display=display.none)
bgColor = input.color(color.new(color.white, 100), "Background Color", group="Cosmetics", display=display.none)
lineWidth = input.int(2, "Line Width", minval=1, maxval=5, group="Cosmetics", display=display.none)
slColor = input.color(color.yellow, "Stop Loss Color", group="Cosmetics", display=display.none)

// MACD parameters
[macdLine, signalLine, histogram] = ta.macd(close, 12, 26, 9)

// Find bar indices
var int startBarIndex = na
var int tradeBarIndex = na
if time >= consolidationStart and na(startBarIndex)
    startBarIndex := bar_index
if time >= tradeDate and na(tradeBarIndex)
    tradeBarIndex := bar_index

// Function to find prevalent highs and lows
findPrevalentLevels(periods) =>
    var float[] highs = array.new_float(0)
    var float[] lows = array.new_float(0)
    for i = 0 to periods 
        array.push(highs, high[i])
        array.push(lows, low[i])
    array.sort(highs, order.descending)
    array.sort(lows, order.ascending)
    prevalentHigh = array.get(highs, math.round(periods * 0.3))
    prevalentLow = array.get(lows, math.round(periods * 0.3))
    [prevalentHigh, prevalentLow]

// Calculate consolidation high and low
var float consolHigh = na
var float consolLow = na
var float slPosition = na

if not na(startBarIndex) and bar_index >= startBarIndex and bar_index <= startBarIndex + consolPeriods
    if consolMethod == "Wicks"
        consolHigh := na(consolHigh) ? high : math.max(consolHigh, high)
        consolLow := na(consolLow) ? low : math.min(consolLow, low)
    else if consolMethod == "Bodies"
        consolHigh := na(consolHigh) ? math.max(open, close) : math.max(consolHigh, math.max(open, close))
        consolLow := na(consolLow) ? math.min(open, close) : math.min(consolLow, math.min(open, close))
    else if consolMethod == "Smart" and bar_index == startBarIndex + consolPeriods - 1
        [prevalentHigh, prevalentLow] = findPrevalentLevels(consolPeriods)
        consolHigh := prevalentHigh
        consolLow := prevalentLow

// Function to draw box
drawBox(left, top, right, bottom, lineWidth) =>
    box.new(left, top, right, bottom, border_color=boxColor, border_width=lineWidth, bgcolor=bgColor)

// Draw consolidation zone, initial Stop Loss, and R:R zones
if barstate.islast and not na(consolHigh) and not na(consolLow)
    visualStartIndex = math.max(0, startBarIndex - 1)
    visualEndIndex = startBarIndex + consolPeriods + 1
    
    drawBox(visualStartIndex, consolHigh, visualEndIndex, consolLow, lineWidth)
    
    middleTop = consolHigh - (consolHigh - consolLow) / 3
    middleBottom = consolLow + (consolHigh - consolLow) / 3
    drawBox(visualStartIndex, middleTop, visualEndIndex, middleBottom, lineWidth)
    
    line.new(visualStartIndex, middleTop, visualEndIndex, middleTop, color=lineColor, width=lineWidth)
    line.new(visualStartIndex, middleBottom, visualEndIndex, middleBottom, color=lineColor, width=lineWidth)
    
    labelText = str.tostring(consolPeriods + 1) + " weeks consolidation"
    label.new(x = visualStartIndex + math.round((consolPeriods + 1) / 2), 
              y = consolHigh * 1.015, 
              text = labelText, 
              color = color.new(color.black, 20),  
              textcolor = color.white, 
              style = label.style_label_center, 
              size = size.small)

    // Draw initial Stop Loss line
    line.new(visualEndIndex, slPosition, visualEndIndex + 1, slPosition, color=slColor, width=lineWidth)
    label.new(visualEndIndex + 1, slPosition, "SL=" + str.tostring(slPosition, "#.##"), 
              color=slColor, textcolor=color.black, style=label.style_label_left, size=size.small)

    // Calculate and draw initial risk percentage with enhanced label
    var float breakoutHigh = na
    if time >= breakoutWeek and na(breakoutHigh)
        breakoutHigh := high
    if not na(effectivePurchasePrice) and effectivePurchasePrice > 0 and not na(slPosition) and slPosition > 0
        initialRisk = (effectivePurchasePrice - slPosition) / effectivePurchasePrice * 100
        
        // Find the index of the breakout candle
        breakoutIndex = ta.valuewhen(time == breakoutWeek, bar_index, 0)
        
        // Calculate candle size for the breakout candle
        breakoutHigh = ta.valuewhen(time == breakoutWeek, high, 0)
        breakoutLow = ta.valuewhen(time == breakoutWeek, low, 0)
        candleSize = (breakoutHigh - breakoutLow) / breakoutLow * 100
        
        // Calculate volume variation
        breakoutVolume = ta.valuewhen(time == breakoutWeek, volume, 0)
        prevVolume = ta.valuewhen(time == breakoutWeek, volume[1], 0)
        volumeVariation = (breakoutVolume - prevVolume) / prevVolume * 100
        
        // Prepare label text with left-aligned emojis
        labelText = (initialRisk < 15 ? "✅ " : "⚠️ ") + "Initial Risk: " + str.tostring(initialRisk, "#.##") + "%\n" +
                     (candleSize > 6 ? "✅ " : "⚠️ ") + "Candle Size: " + str.tostring(candleSize, "#.##") + "%\n" +
                     (volumeVariation > 50 ? "✅ " : volumeVariation > 50 ? "☑️ " : "⚠️ ") + "Volume Variation: " + str.tostring(volumeVariation, "#.##") + "%\n"
        
        label.new(visualEndIndex, breakoutHigh * 1.01, labelText, 
                  color=color.new(color.black, 20), textcolor=color.white, 
                  style=label.style_label_right, size=size.small, 
                  yloc=yloc.price)
    
    // Draw R:R zones
    if not na(effectivePurchasePrice) and effectivePurchasePrice > 0 and not na(slPosition) and slPosition > 0 and showRRs
        riskAmount = effectivePurchasePrice - slPosition
        rrZoneStart = visualEndIndex
        rrZoneEnd = rrZoneStart + 2  // Width of 2 candles
        drawRRZones(rrZoneStart, rrZoneEnd, effectivePurchasePrice, riskAmount, nZones, showRRLines)

// Variables for stop loss monitoring
var float currentSL = na
var int lastSlUpdateBar = na
var label slHitLabel = na
var int slHitBar = na
var bool slHit = false

// Calculate initial Stop Loss position based on manualSL input
if bar_index == startBarIndex + consolPeriods - 1
    middleTop = consolHigh - (consolHigh - consolLow) / 3
    middleBottom = consolLow + (consolHigh - consolLow) / 3
    slPosition := manualSL != 0 ? manualSL : middleBottom + (middleTop - middleBottom) * 0.5
    currentSL := slPosition
    lastSlUpdateBar := bar_index

// Monitor MACD crossdowns and update SL
if not na(tradeBarIndex) and bar_index >= tradeBarIndex and timeframe.isweekly and not slHit 
    if macdLine < signalLine and macdLine[1] > signalLine[1] and low > currentSL
        currentSL := low - raisedSLdiff
        lastSLUpdateBar := bar_index
        label.new(bar_index, low - (high - low) * 0.1, "Raised SL=" + str.tostring(currentSL, "#.##"), color=color.new(color.yellow, 20), textcolor=color.black, style=label.style_label_up, size=size.small, yloc=yloc.price)

// Variables to track max gain, max loss, and max drawdown
var float highestPrice = na
var float lowestPrice = na
var float lowestPriceAfterHighest = na
var float maxDrawdown = 0.0
var float maxROI = 0.0

// Calculate whether stop loss is hit
if not na(tradeBarIndex) and bar_index >= tradeBarIndex and not slHit
    effectiveSL = math.max(slPosition, currentSL)  // Use the higher of initial SL and current SL

    // Update max ROI
    currentROI = (high - effectivePurchasePrice) / effectivePurchasePrice * 100
    maxROI := math.max(maxROI, currentROI)

    // Update max drawdown
    if high > highestPrice
        highestPrice := high
        lowestPriceAfterHighest := high
    if low < lowestPriceAfterHighest
        lowestPriceAfterHighest := low
        currentDrawdown = (highestPrice - lowestPriceAfterHighest) / highestPrice * 100
        maxDrawdown := math.max(maxDrawdown, currentDrawdown)

    if low <= effectiveSL or close <= effectiveSL
        slHit := true
        hitPrice = effectiveSL
        
        // Ensure purchase price is valid before calculating ROI
        if not na(effectivePurchasePrice) and effectivePurchasePrice > 0
            roi = (hitPrice - effectivePurchasePrice) / effectivePurchasePrice * 100
            
            // Determine color based on ROI
            labelColor = roi > 0 ? color.green : color.red
            
            label.new(bar_index, low - (high - low) * 0.1, 
                      "SL HIT \nROI: " + str.tostring(roi, "#.##") + "%" +
                      "\nMax ROI: " + str.tostring(maxROI, "#.##") + "%" +
                      "\nMax Drawdown: " + str.tostring(maxDrawdown, "#.##") + "%", 
                      color=labelColor, textcolor=color.white, 
                      style=label.style_label_up, size=size.small, yloc=yloc.price)
        else
            label.new(bar_index, low - (high - low) * 0.1, "SL HIT \nROI: n/a", 
                      color=color.red, textcolor=color.white, 
                      style=label.style_label_up, size=size.small, yloc=yloc.price)


// Determine background color based on profit/loss and SL hit
bgColorPnL = if not na(effectivePurchasePrice) and effectivePurchasePrice > 0 and not na(tradeBarIndex) and bar_index >= tradeBarIndex
    if slHit and bar_index > slHitBar
        na  // Return to default background after SL hit bar
    else if slHit and bar_index == slHitBar
        color.new(color.red, 90)  // Highlight SL hit bar
    else
        close > effectivePurchasePrice ? color.new(color.green, 90) : color.new(color.red, 90)
else
    na

// Apply background color
bgcolor(showPnLColor ? bgColorPnL : na)

// Finishing touches
// drawing the cost line when purchase price is available
var line purchasePriceLine = na
if barstate.islast and effectivePurchasePrice > 0
    lineEndX = slHit ? slHitBar : bar_index
    
    // Remove the old line if it exists
    if not na(purchasePriceLine)
        line.delete(purchasePriceLine)
    
    // Create a new line
    purchasePriceLine := line.new(tradeBarIndex, effectivePurchasePrice, lineEndX, effectivePurchasePrice, 
                                  color=color.blue, style=line.style_dotted)
    
    // Add the label
    label.new(lineEndX, effectivePurchasePrice, "Filled Price: " + str.tostring(effectivePurchasePrice, "#.##"), 
              color=color.new(color.blue, 20), textcolor=color.white, style=label.style_label_left, size=size.small)

// drawing the current SL:
if barstate.islast and not na(currentSL) and not(slHit)
    if na(currentSLLine)
        slStartBar = na(lastSLUpdateBar) ? tradeBarIndex : lastSLUpdateBar
        currentSLLine := line.new(slStartBar, currentSL, bar_index, currentSL, 
                                  color=color.yellow, style=line.style_dotted)
    else if not slHit
        line.set_x2(currentSLLine, bar_index)
        line.set_y2(currentSLLine, currentSL)
    
    label.new(slHit ? slHitBar : bar_index, currentSL, "Current SL: " + str.tostring(currentSL, "#.##"), 
              color=color.new(color.yellow,20), textcolor=color.black, style=label.style_label_left, size=size.small)

// extra views
showROI = input.bool(false, "Show ROI (current/filled price)", group="Performance", display=display.none)

// Function to calculate ROI
calcROI(currentPrice, purchasePrice) =>
    ((currentPrice - purchasePrice) / purchasePrice) * 100

// Variables to track max gain, max loss, and max drawdown
var int highestPriceBar = na
var int lowestPriceBar = na

// Update tracking variables
if not na(effectivePurchasePrice) and effectivePurchasePrice > 0 and not na(tradeBarIndex) and bar_index >= tradeBarIndex
    // Initialize on first bar after entry or reset when new high is reached
    if na(highestPrice) or high > highestPrice
        highestPrice := high
        lowestPrice := low
        lowestPriceAfterHighest := high
        highestPriceBar := bar_index
        lowestPriceBar := bar_index
        maxDrawdown := 0.0  // Reset max drawdown when new high is reached
    
    // Update lowest price after highest and calculate drawdown
    if low < lowestPriceAfterHighest
        lowestPriceAfterHighest := low
        lowestPriceBar := bar_index
        currentDrawdown = (highestPrice - lowestPriceAfterHighest) / highestPrice * 100
        maxDrawdown := math.max(maxDrawdown, currentDrawdown)

    if low < lowestPrice
        lowestPrice := low
        lowestPriceBar := bar_index

// Calculate metrics
roi = calcROI(close, effectivePurchasePrice)
maxGain = calcROI(highestPrice, effectivePurchasePrice)
maxLoss = calcROI(lowestPrice, effectivePurchasePrice)

// Show enhanced ROI label with debug info
if barstate.islast and showROI and not na(effectivePurchasePrice) and effectivePurchasePrice > 0 and not slHit
    debugText = "\nROI: " + str.tostring(roi, "#.##") + "%\n" +
                 "Max Gain: " + str.tostring(maxGain, "#.##") + "%\n"
    
    if roi < 0
        debugText += "Max Loss: " + str.tostring(maxLoss, "#.##") + "%\n"
    
    debugText += "Max Drawdown: " + str.tostring(maxDrawdown, "#.##") + "%\n"
    
    roiColor = roi >= 0 ? color.green : color.red
    label.new(bar_index + 1, close, debugText, 
              color=color.new(color.black, 20), 
              textcolor=roiColor,
              style=label.style_label_left,
              size=size.small)
